import { pattern } from '../pattern'
describe('pattern', () => {
    it('**/*', () => {
        const p = pattern('**/*')
        expect(p('/a/b/c')).toEqual(true)
        expect(p('a/b/c')).toEqual(true)
        expect(p('a/b/c/a.txt')).toEqual(true)
        expect(p('a/b/d/a.txt')).toEqual(true)
        expect(p('a/b/c/a.ts')).toEqual(true)
        expect(p('a/b/d/a.ts')).toEqual(true)
    })
    it('**/*.ts', () => {
        const p = pattern('**/*.ts')
        expect(p('/a/b/c')).toEqual(false)
        expect(p('a/b/c')).toEqual(false)
        expect(p('a/b/c/a.txt')).toEqual(false)
        expect(p('a/b/d/a.txt')).toEqual(false)
        expect(p('a/b/c/a.ts')).toEqual(true)
        expect(p('a/b/d/a.ts')).toEqual(true)
    })
    it(`['**/*','!**/*.ts']`, () => {
        const p = pattern(['**/*','!**/*.ts'])
        expect(p('/a/b/c')).toEqual(true)
        expect(p('a/b/c')).toEqual(true)
        expect(p('a/b/c/a.txt')).toEqual(true)
        expect(p('a/b/d/a.txt')).toEqual(true)
        expect(p('a/b/c/a.ts')).toEqual(false)
        expect(p('a/b/d/a.ts')).toEqual(false)
    })
    it('**/*.ts', () => {
        const p = pattern(['**/*.ts','!**/c/*'])
        expect(p('/a/b/c')).toEqual(false)
        expect(p('a/b/c')).toEqual(false)
        expect(p('a/b/c/a.txt')).toEqual(false)
        expect(p('a/b/d/a.txt')).toEqual(false)
      //  expect(p('a/b/c/a.ts')).toEqual(false)
        expect(p('a/b/d/a.ts')).toEqual(true)
    })
})
